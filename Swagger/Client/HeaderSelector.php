<?php
/**
 * ApiException
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Assurbox API V1
 *
 * AssurBox Developer Documentation    # Introduction    Description of AssurBox RESTful API.    # Base Urls    Prod : https://api.assurbox.net/    Sandbox : https://api-sandbox.assurbox.net/    # Current limitations:    AssurBox service does not support cross origin headers for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.    # Conventions    All dates are UTC dates.    # Errors    | Code        | Signification           | More  |  | ------------- |:-------------:| -----:|  | 200      | Ok | The operation succeeded |  | 400 | Bad Request | Someting was wrong on the client side : Check your code |  | 401      | Unauthorized      |   Not autorized to access (maybe not authentified) |  | 403 | Forbidden     |    You are not allowed to do the operation |  | 500 | Internal Server Error | Something went wrong in the AssurBox system |      In addition to the http code, a detail is usually returned with more information    # User types    The AssurBox Api can be used by two types of users : Insurances and Non-Insurances (partners).    The AssurBox Api will react according to the type of user making a call.    # Authentication    OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications.      ## Obtaining an api ClientId and ClientSecret    In order to use the api, you need to obtain credentials.    You need to log-in the AssurBox web application with the primary owner account (or ask the owner to do it for you).    If you don't have an account yet : [ask for one](mailto:account@assurbox.net?subject=Account_Request)      Once you are logged-in, go to the settings, click on api keys.    Now, click on “create a client”.    Give a name to the client (this name is only there for you, you can create several api credentials, to used them with different applications you want to integrate AssurBox in)    Once you click “create the client”, the client will be saved.    The client id and client secret will be shown to you one time only, it’s not possible to retrieve the secret after that, so be sure to save it somewhere)    [Check an example here.](http://assurbox.net/screenshot-obtenir-les-cle-api/)    ## Using ClientId and ClientSecret    When you have the credentials, you can access the api, following the Oahth2 flow    Before creating a request to an endpoint, you need to get an access token, when you have the token you need to present is to the endpoint you are calling using an authentication header (key: authentication , value : “bearer [the token]“)    [baseurl]/ouath/token    ## Using the token    Each call to the api must use the bearer token. It contains the identity of your api client and the api reacts according to this identity
 *
 * OpenAPI spec version: v1
 * Contact: support@assurbox.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 1.0.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client;

use \Exception;

/**
 * ApiException Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HeaderSelector
{

    /**
     * @param string[] $accept
     * @param string[] $contentTypes
     * @return array
     */
    public function selectHeaders($accept, $contentTypes)
    {
        $headers = [];

        $accept = $this->selectAcceptHeader($accept);
        if ($accept !== null) {
            $headers['Accept'] = $accept;
        }

        $headers['Content-Type'] = $this->selectContentTypeHeader($contentTypes);
        return $headers;
    }

    /**
     * @param string[] $accept
     * @return array
     */
    public function selectHeadersForMultipart($accept)
    {
        $headers = $this->selectHeaders($accept, []);

        unset($headers['Content-Type']);
        return $headers;
    }

    /**
     * Return the header 'Accept' based on an array of Accept provided
     *
     * @param string[] $accept Array of header
     *
     * @return string Accept (e.g. application/json)
     */
    private function selectAcceptHeader($accept)
    {
        if (count($accept) === 0 || (count($accept) === 1 && $accept[0] === '')) {
            return null;
        } elseif (preg_grep("/application\/json/i", $accept)) {
            return 'application/json';
        } else {
            return implode(',', $accept);
        }
    }

    /**
     * Return the content type based on an array of content-type provided
     *
     * @param string[] $contentType Array fo content-type
     *
     * @return string Content-Type (e.g. application/json)
     */
    private function selectContentTypeHeader($contentType)
    {
        if (count($contentType) === 0 || (count($contentType) === 1 && $contentType[0] === '')) {
            return 'application/json';
        } elseif (preg_grep("/application\/json/i", $contentType)) {
            return 'application/json';
        } else {
            return implode(',', $contentType);
        }
    }
}

